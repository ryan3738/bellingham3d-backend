// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String            @id @default(cuid())
  name                    String?
  email                   String?           @unique
  password                String?
  addresses               CustomerAddress[] @relation("CustomerAddress_user")
  defaultShipping         CustomerAddress?  @relation("CustomerAddress_isDefaultShipping")
  defaultBilling          CustomerAddress?  @relation("CustomerAddress_isDefaultBilling")
  cart                    CartItem[]        @relation("CartItem_user")
  orders                  Order[]           @relation("Order_user")
  role                    Role?             @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?           @map("role")
  products                Product[]         @relation("Product_user")
  createdAt               DateTime?
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Product {
  id                    String         @id @default(cuid())
  name                  String?
  description           String?
  images                ProductImage[] @relation("Product_images_ProductImage_product")
  status                String?
  price                 Int?
  category              Category[]     @relation("Category_product_Product_category")
  inventoryItem         InventoryItem? @relation("InventoryItem_product")
  variants              Variant[]      @relation("Variant_product")
  createdAt             DateTime?
  user                  User?          @relation("Product_user", fields: [userId], references: [id])
  userId                String?        @map("user")
  from_CartItem_product CartItem[]     @relation("CartItem_product")

  @@index([userId])
}

model ProductImage {
  id                   String      @id @default(cuid())
  image                Json?
  altText              String?
  createdAt            DateTime?
  product              Product[]   @relation("Product_images_ProductImage_product")
  from_OrderItem_image OrderItem[] @relation("OrderItem_image")
}

model CartItem {
  id           String    @id @default(cuid())
  quantity     Int?
  product      Product?  @relation("CartItem_product", fields: [productId], references: [id])
  productId    String?   @map("product")
  variants     Variant[] @relation("CartItem_variants_many")
  saveForLater Boolean?
  createdAt    DateTime?
  user         User?     @relation("CartItem_user", fields: [userId], references: [id])
  userId       String?   @map("user")

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id          String        @id @default(cuid())
  name        String?
  variants    String?
  description String?
  image       ProductImage? @relation("OrderItem_image", fields: [imageId], references: [id])
  imageId     String?       @map("image")
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order")

  @@index([imageId])
  @@index([orderId])
}

model Order {
  id                String           @id @default(cuid())
  total             Int?
  items             OrderItem[]      @relation("OrderItem_order")
  user              User?            @relation("Order_user", fields: [userId], references: [id])
  userId            String?          @map("user")
  charge            String?
  shippingAddress   CustomerAddress? @relation("Order_shippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?          @map("shippingAddress")
  createdAt         DateTime?

  @@index([userId])
  @@index([shippingAddressId])
}

model Option {
  id          String    @id @default(cuid())
  name        String?
  description String?
  variants    Variant[] @relation("Variant_option")
}

model Variant {
  id                     String     @id @default(cuid())
  option                 Option?    @relation("Variant_option", fields: [optionId], references: [id])
  optionId               String?    @map("option")
  product                Product?   @relation("Variant_product", fields: [productId], references: [id])
  productId              String?    @map("product")
  name                   String?
  description            String?
  from_CartItem_variants CartItem[] @relation("CartItem_variants_many")

  @@index([optionId])
  @@index([productId])
}

model InventoryItem {
  id               String   @id @default(cuid())
  price            Int?
  requiresShipping Boolean?
  tracked          Boolean?
  quantity         Int?
  allowBackorder   Boolean?
  product          Product? @relation("InventoryItem_product", fields: [productId], references: [id])
  productId        String?  @unique @map("product")
}

model CustomerAddress {
  id                   String    @id @default(cuid())
  firstName            String?
  lastName             String?
  company              String?
  address1             String?
  address2             String?
  city                 String?
  region               String?
  country              String?
  zip                  String?
  phone                String?
  createdAt            DateTime?
  user                 User?     @relation("CustomerAddress_user", fields: [userId], references: [id])
  userId               String?   @map("user")
  isDefaultShipping    User?     @relation("CustomerAddress_isDefaultShipping", fields: [isDefaultShippingId], references: [id])
  isDefaultShippingId  String?   @unique @map("isDefaultShipping")
  isDefaultBilling     User?     @relation("CustomerAddress_isDefaultBilling", fields: [isDefaultBillingId], references: [id])
  isDefaultBillingId   String?   @unique @map("isDefaultBilling")
  orderShippingAddress Order[]   @relation("Order_shippingAddress")

  @@index([userId])
}

model Category {
  id          String    @id @default(cuid())
  name        String?
  description String?
  product     Product[] @relation("Category_product_Product_category")
}

model Role {
  id                String   @id @default(cuid())
  name              String?
  canManageProducts Boolean?
  canSeeOtherUsers  Boolean?
  canManageUsers    Boolean?
  canManageRoles    Boolean?
  canManageCart     Boolean?
  canManageOrders   Boolean?
  assignedTo        User[]   @relation("User_role")
}