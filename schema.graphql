# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  addToCart(productId: ID, variantIds: [ID]): CartItem
  checkout(token: String!, shippingId: ID): Order
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(
    where: OrderItemWhereUniqueInput!
    data: OrderItemUpdateInput!
  ): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOption(data: OptionCreateInput!): Option
  createOptions(data: [OptionCreateInput!]!): [Option]
  updateOption(where: OptionWhereUniqueInput!, data: OptionUpdateInput!): Option
  updateOptions(data: [OptionUpdateArgs!]!): [Option]
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteOptions(where: [OptionWhereUniqueInput!]!): [Option]
  createVariant(data: VariantCreateInput!): Variant
  createVariants(data: [VariantCreateInput!]!): [Variant]
  updateVariant(
    where: VariantWhereUniqueInput!
    data: VariantUpdateInput!
  ): Variant
  updateVariants(data: [VariantUpdateArgs!]!): [Variant]
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteVariants(where: [VariantWhereUniqueInput!]!): [Variant]
  createInventoryItem(data: InventoryItemCreateInput!): InventoryItem
  createInventoryItems(data: [InventoryItemCreateInput!]!): [InventoryItem]
  updateInventoryItem(
    where: InventoryItemWhereUniqueInput!
    data: InventoryItemUpdateInput!
  ): InventoryItem
  updateInventoryItems(data: [InventoryItemUpdateArgs!]!): [InventoryItem]
  deleteInventoryItem(where: InventoryItemWhereUniqueInput!): InventoryItem
  deleteInventoryItems(
    where: [InventoryItemWhereUniqueInput!]!
  ): [InventoryItem]
  createCustomerAddress(data: CustomerAddressCreateInput!): CustomerAddress
  createCustomerAddresses(
    data: [CustomerAddressCreateInput!]!
  ): [CustomerAddress]
  updateCustomerAddress(
    where: CustomerAddressWhereUniqueInput!
    data: CustomerAddressUpdateInput!
  ): CustomerAddress
  updateCustomerAddresses(
    data: [CustomerAddressUpdateArgs!]!
  ): [CustomerAddress]
  deleteCustomerAddress(
    where: CustomerAddressWhereUniqueInput!
  ): CustomerAddress
  deleteCustomerAddresses(
    where: [CustomerAddressWhereUniqueInput!]!
  ): [CustomerAddress]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  addresses(
    where: CustomerAddressWhereInput! = {}
    orderBy: [CustomerAddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerAddress!]
  addressesCount(where: CustomerAddressWhereInput! = {}): Int
  defaultShipping: CustomerAddress
  defaultBilling: CustomerAddress
  cart(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  role: Role
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: String
  passwordResetToken: PasswordState
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  addresses: CustomerAddressRelateToManyForUpdateInput
  defaultShipping: CustomerAddressRelateToOneForUpdateInput
  defaultBilling: CustomerAddressRelateToOneForUpdateInput
  cart: CartItemRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  createdAt: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input CustomerAddressRelateToManyForUpdateInput {
  disconnect: [CustomerAddressWhereUniqueInput!]
  set: [CustomerAddressWhereUniqueInput!]
  create: [CustomerAddressCreateInput!]
  connect: [CustomerAddressWhereUniqueInput!]
}

input CustomerAddressRelateToOneForUpdateInput {
  create: CustomerAddressCreateInput
  connect: CustomerAddressWhereUniqueInput
  disconnect: Boolean
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  addresses: CustomerAddressRelateToManyForCreateInput
  defaultShipping: CustomerAddressRelateToOneForCreateInput
  defaultBilling: CustomerAddressRelateToOneForCreateInput
  cart: CartItemRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  createdAt: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input CustomerAddressRelateToManyForCreateInput {
  create: [CustomerAddressCreateInput!]
  connect: [CustomerAddressWhereUniqueInput!]
}

input CustomerAddressRelateToOneForCreateInput {
  create: CustomerAddressCreateInput
  connect: CustomerAddressWhereUniqueInput
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  images(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  imagesCount(where: ProductImageWhereInput! = {}): Int
  status: String
  price: Int
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  inventoryItem: InventoryItem
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variantsCount(where: VariantWhereInput! = {}): Int
  createdAt: String
  user: User
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  status: StringNullableFilter
  category: CategoryManyRelationFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  images: ProductImageRelateToManyForUpdateInput
  status: String
  price: Int
  category: CategoryRelateToManyForUpdateInput
  inventoryItem: InventoryItemRelateToOneForUpdateInput
  variants: VariantRelateToManyForUpdateInput
  createdAt: String
  user: UserRelateToOneForUpdateInput
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input InventoryItemRelateToOneForUpdateInput {
  create: InventoryItemCreateInput
  connect: InventoryItemWhereUniqueInput
  disconnect: Boolean
}

input VariantRelateToManyForUpdateInput {
  disconnect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  images: ProductImageRelateToManyForCreateInput
  status: String
  price: Int
  category: CategoryRelateToManyForCreateInput
  inventoryItem: InventoryItemRelateToOneForCreateInput
  variants: VariantRelateToManyForCreateInput
  createdAt: String
  user: UserRelateToOneForCreateInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input InventoryItemRelateToOneForCreateInput {
  create: InventoryItemCreateInput
  connect: InventoryItemWhereUniqueInput
}

input VariantRelateToManyForCreateInput {
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  createdAt: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  createdAt: String
  product: ProductRelateToManyForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  createdAt: String
  product: ProductRelateToManyForCreateInput
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variantsCount(where: VariantWhereInput! = {}): Int
  saveForLater: Boolean
  createdAt: String
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  variants: VariantManyRelationFilter
  user: UserWhereInput
}

input VariantManyRelationFilter {
  every: VariantWhereInput
  some: VariantWhereInput
  none: VariantWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneForUpdateInput
  variants: VariantRelateToManyForUpdateInput
  saveForLater: Boolean
  createdAt: String
  user: UserRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneForCreateInput
  variants: VariantRelateToManyForCreateInput
  saveForLater: Boolean
  createdAt: String
  user: UserRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type OrderItem {
  id: ID!
  name: String
  variants: String
  description: String
  image: ProductImage
  price: Int
  quantity: Int
  order: Order
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  variants: String
  description: String
  image: ProductImageRelateToOneForUpdateInput
  price: Int
  quantity: Int
  order: OrderRelateToOneForUpdateInput
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  variants: String
  description: String
  image: ProductImageRelateToOneForCreateInput
  price: Int
  quantity: Int
  order: OrderRelateToOneForCreateInput
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Order {
  id: ID!
  total: Int
  items(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  user: User
  charge: String
  shippingAddress: CustomerAddress
  createdAt: String
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
}

input OrderOrderByInput {
  id: OrderDirection
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  charge: String
  shippingAddress: CustomerAddressRelateToOneForUpdateInput
  createdAt: String
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  charge: String
  shippingAddress: CustomerAddressRelateToOneForCreateInput
  createdAt: String
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type Option {
  id: ID!
  name: String
  description: String
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variantsCount(where: VariantWhereInput! = {}): Int
}

input OptionWhereUniqueInput {
  id: ID
}

input OptionWhereInput {
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
  id: IDFilter
  name: StringNullableFilter
}

input OptionOrderByInput {
  id: OrderDirection
}

input OptionUpdateInput {
  name: String
  description: String
  variants: VariantRelateToManyForUpdateInput
}

input OptionUpdateArgs {
  where: OptionWhereUniqueInput!
  data: OptionUpdateInput!
}

input OptionCreateInput {
  name: String
  description: String
  variants: VariantRelateToManyForCreateInput
}

type Variant {
  id: ID!
  option: Option
  product: Product
  name: String
  description: String
}

input VariantWhereUniqueInput {
  id: ID
}

input VariantWhereInput {
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
  id: IDFilter
}

input VariantOrderByInput {
  id: OrderDirection
}

input VariantUpdateInput {
  option: OptionRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  name: String
  description: String
}

input OptionRelateToOneForUpdateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
  disconnect: Boolean
}

input VariantUpdateArgs {
  where: VariantWhereUniqueInput!
  data: VariantUpdateInput!
}

input VariantCreateInput {
  option: OptionRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  name: String
  description: String
}

input OptionRelateToOneForCreateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

type InventoryItem {
  id: ID!
  price: Int
  requiresShipping: Boolean
  tracked: Boolean
  quantity: Int
  allowBackorder: Boolean
  product: Product
}

input InventoryItemWhereUniqueInput {
  id: ID
}

input InventoryItemWhereInput {
  AND: [InventoryItemWhereInput!]
  OR: [InventoryItemWhereInput!]
  NOT: [InventoryItemWhereInput!]
  id: IDFilter
}

input InventoryItemOrderByInput {
  id: OrderDirection
}

input InventoryItemUpdateInput {
  price: Int
  requiresShipping: Boolean
  tracked: Boolean
  quantity: Int
  allowBackorder: Boolean
  product: ProductRelateToOneForUpdateInput
}

input InventoryItemUpdateArgs {
  where: InventoryItemWhereUniqueInput!
  data: InventoryItemUpdateInput!
}

input InventoryItemCreateInput {
  price: Int
  requiresShipping: Boolean
  tracked: Boolean
  quantity: Int
  allowBackorder: Boolean
  product: ProductRelateToOneForCreateInput
}

type CustomerAddress {
  id: ID!
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  region: String
  country: String
  zip: String
  phone: String
  createdAt: String
  user: User
  isDefaultShipping: User
  isDefaultBilling: User
  orderShippingAddress(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  orderShippingAddressCount(where: OrderWhereInput! = {}): Int
}

input CustomerAddressWhereUniqueInput {
  id: ID
}

input CustomerAddressWhereInput {
  AND: [CustomerAddressWhereInput!]
  OR: [CustomerAddressWhereInput!]
  NOT: [CustomerAddressWhereInput!]
  id: IDFilter
}

input CustomerAddressOrderByInput {
  id: OrderDirection
}

input CustomerAddressUpdateInput {
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  region: String
  country: String
  zip: String
  phone: String
  createdAt: String
  user: UserRelateToOneForUpdateInput
  isDefaultShipping: UserRelateToOneForUpdateInput
  isDefaultBilling: UserRelateToOneForUpdateInput
  orderShippingAddress: OrderRelateToManyForUpdateInput
}

input CustomerAddressUpdateArgs {
  where: CustomerAddressWhereUniqueInput!
  data: CustomerAddressUpdateInput!
}

input CustomerAddressCreateInput {
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  region: String
  country: String
  zip: String
  phone: String
  createdAt: String
  user: UserRelateToOneForCreateInput
  isDefaultShipping: UserRelateToOneForCreateInput
  isDefaultBilling: UserRelateToOneForCreateInput
  orderShippingAddress: OrderRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  description: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
}

input CategoryOrderByInput {
  id: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
  product: ProductRelateToManyForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
  product: ProductRelateToManyForCreateInput
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
}

input RoleOrderByInput {
  id: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orderItems(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  option(where: OptionWhereUniqueInput!): Option
  optionsCount(where: OptionWhereInput! = {}): Int
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variant(where: VariantWhereUniqueInput!): Variant
  variantsCount(where: VariantWhereInput! = {}): Int
  inventoryItems(
    where: InventoryItemWhereInput! = {}
    orderBy: [InventoryItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InventoryItem!]
  inventoryItem(where: InventoryItemWhereUniqueInput!): InventoryItem
  inventoryItemsCount(where: InventoryItemWhereInput! = {}): Int
  customerAddresses(
    where: CustomerAddressWhereInput! = {}
    orderBy: [CustomerAddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerAddress!]
  customerAddress(where: CustomerAddressWhereUniqueInput!): CustomerAddress
  customerAddressesCount(where: CustomerAddressWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
